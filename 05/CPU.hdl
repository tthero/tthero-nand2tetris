// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // A-instruction or C-instruction?
    // If C-instruction, take ALU output
    // i  x  x  a  c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
    // 15 14 13 12 11 10 9  8  7  6  5  4  3  2  1  0
    // a c1 c2 c3 c4 c5 c6 = control bits for ALU
    // d1 d2 d3 = A D M
    // j1 j2 j3 = "< = >"

    // Decode C-instruction
    // i => instruction[15], opcode
    Mux16(a=false, b=instruction, sel=instruction[15], out[0]=j3, out[1]=j2, /*
    */    out[2]=j1, out[3]=d3, out[4]=d2, out[5]=d1, out[6]=c6, /*
    */    out[7]=c5, out[8]=c4, out[9]=c3, out[10]=c2, out[11]=c1, /*
    */    out[12]=aForAM, out[13..14]=x, out[15]=opCode);

    // opCode to enable A-instruction or memory address output, not C-instruction
    Mux16(a=instruction, b=outALU, sel=opCode, out=inAReg);

    // Store in A register? If A-instruction, no need to ask
    // If C-instruction, ask d1
    Mux(a=true, b=d1, sel=opCode, out=storeAReg);
    ARegister(in=inAReg, load=storeAReg, out=outAReg);

    // OUTPUT:
    // Output the memory address?
    And16(a=outAReg, b=true, out[0..14]=addressM, out[15]=extra1);

    // Choose A or M depending on "a" (instruction[12]) in C-instruction
    Mux16(a=outAReg, b=inM, sel=aForAM, out=inALUy);

    // Store in D register? Ask d2
    DRegister(in=outALU, load=d2, out=inALUx);

    // Compute using ALU
    ALU(x=inALUx, y=inALUy, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outALU, zr=zr, ng=ng);

    // OUTPUT:
    // Output the value for memory M
    // Whether write to M memory or not
    And16(a=outALU, b=true, out=outM);
    And(a=d3, b=true, out=writeM);

    // Determining the load for PC
    Mux(a=false, b=ng, sel=j1, out=outJ1);
    Mux(a=false, b=zr, sel=j2, out=outJ2);
    Or(a=ng, b=zr, out=inGT);
    Not(in=inGT, out=outGT);
    Mux(a=false, b=outGT, sel=j3, out=outJ3);
    Or(a=outJ1, b=outJ2, out=outJ1J2);
    Or(a=outJ1J2, b=outJ3, out=loadPC);

    // PC
    PC(in=outAReg, load=loadPC, inc=true, reset=reset, out[0..14]=pc, out[15]=extra2);
}